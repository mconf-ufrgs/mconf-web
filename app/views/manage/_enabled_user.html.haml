.thread.thread-user.user-wrapper.user-simple{:class => "#{cycle("thread-even" , "thread-odd")}", :id => "user-#{user.permalink}"}
  .logo-in-thread
    = raw link_logo_image(user, :size => '32', :title => user.name, :url => user_path(user), :class => 'logo logo-user')

  %ul.management-links

    = link_to (edit_user_path(user)) do
      = icon_edit(:alt => t('.edit'), :title => t('.edit'))

    - if !user.confirmed?
      = link_to confirm_user_path(user), :data => { :confirm => t('.confirm_confirm') },  :method => :post do
        = icon_confirm_user(:alt => t('.confirm'), :title => t('.confirm'))

    - if !user.can_record?
      = link_to user_path(user, user: {can_record: true}, redir_url: manage_users_path(params)), method: :patch do
        = icon_cant_rec(alt: t('.allow_record'), title: t('.allow_record'))
    - else
      = link_to user_path(user, user: {can_record: false}, redir_url: manage_users_path(params)), method: :patch do
        = icon_can_rec(alt: t('.disallow_record'), title: t('.disallow_record'))

    - unless user.superuser  # prevent admins from disabling and disapproving themselves
      - if user.require_approval? || !user.approved?
        = approval_links :user, user

      = link_to disable_user_path(user), :data => { :confirm => t('.disable_confirm') }, :method => :delete do
        = icon_disable(:alt => t('.disable'), :title => t('.disable'))
      = render 'manage/destroy_user', user: user

  .thread-title
    - words = params[:q].try(:split)
    = link_to user_path(user), :class => 'user-name' do
      = Mconf::Highlighter.highlight(user.full_name, words)
    %span.user-email
      = "(#{Mconf::Highlighter.highlight(user.username, words)}, #{Mconf::Highlighter.highlight(user.email, words)})".html_safe
    %span.user-category
      = user_category(user)

      - if user.enrollment.blank?
        = t(".enrollment_none")
      - else
        = t(".enrollment", enrollment: user.enrollment)


    .current-sign-in
      = t('.last_sign_in')
      - if user.current_sign_in_at
        %span.tooltipped{ title: user.current_sign_in_at }= "#{format_date(user.current_sign_in_at, :long) }"
        = " #{t('.auth_using')} #{user_last_sign_in_method(user).to_s}"
      - else
        %span.tooltipped{ title: t('.never_sign_in') }= "?"
      - methods = user_sign_in_methods(user).join(", ")
      = "(#{t('.available_auth')}: #{methods})"
